// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// RegenerateTokenHandlerFunc turns a function with the right signature into a regenerate token handler
type RegenerateTokenHandlerFunc func(RegenerateTokenParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn RegenerateTokenHandlerFunc) Handle(params RegenerateTokenParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// RegenerateTokenHandler interface for that can handle valid regenerate token params
type RegenerateTokenHandler interface {
	Handle(RegenerateTokenParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewRegenerateToken creates a new http.Handler for the regenerate token operation
func NewRegenerateToken(ctx *middleware.Context, handler RegenerateTokenHandler) *RegenerateToken {
	return &RegenerateToken{Context: ctx, Handler: handler}
}

/*
	RegenerateToken swagger:route POST /regenerateToken account regenerateToken

RegenerateToken regenerate token API
*/
type RegenerateToken struct {
	Context *middleware.Context
	Handler RegenerateTokenHandler
}

func (o *RegenerateToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegenerateTokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegenerateTokenBody regenerate token body
//
// swagger:model RegenerateTokenBody
type RegenerateTokenBody struct {

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`
}

// Validate validates this regenerate token body
func (o *RegenerateTokenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this regenerate token body based on context it is used
func (o *RegenerateTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegenerateTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegenerateTokenBody) UnmarshalBinary(b []byte) error {
	var res RegenerateTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegenerateTokenOKBody regenerate token o k body
//
// swagger:model RegenerateTokenOKBody
type RegenerateTokenOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this regenerate token o k body
func (o *RegenerateTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this regenerate token o k body based on context it is used
func (o *RegenerateTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegenerateTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegenerateTokenOKBody) UnmarshalBinary(b []byte) error {
	var res RegenerateTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
